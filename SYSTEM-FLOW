
To verify user login credentials (like admin / admin) and store them in a PostgreSQL database, you should implement a REST API to handle authentication. Here's how you can structure this:

📦 Step-by-Step Workflow
1.➡️Frontend (HTML Form) ➡️ 2. REST API (Express) ➡️ 3. Database (PostgreSQL)

🔌 REST API Workflow
1, Frontend Form submits the username and password via a POST request.
2, REST API (Node.js + Express) receives the request and checks the database.
3, If the credentials match (admin / admin), it responds with a success message.
4, If not, it responds with an error.


HTTP Methods in REST API

1. GET → 📦 Retrieve Data
Purpose: Fetch data from the server (read-only).
Usage in Login System: Get the list of users or user profile information.

📝 Why It's Important:

Allows the frontend to display user data or profile details.

2. POST → ➕ Create Data
Purpose: Send data to the server to create a new resource.
Usage in Login System: Register a new user or log in a user.

Why It's Important:

Used to save new user data like registration or login attempts.

3. PUT → 🔄 Update Data (Full Update)
Purpose: Update all information of an existing resource.
Usage in Login System: Update user profile information.

 Why It's Important:

Updates all user details in the database.

4. PATCH → ✏️ Partial Update
Purpose: Update specific fields in a resource.
Usage in Login System: Update just the email or password.

 Why It's Important:

Used when only one part of the user data needs to be updated.


5. DELETE → ❌ Remove Data
Purpose: Delete a resource from the server.
Usage in Login System: Delete a user account.

 Why It's Important:

Removes user data from the system when requested.
